<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        zQCOioEA5tKgALmtkQCvqJUAraeXAP/89ADt4r8A5dejAP/xugD/8rgAnZuSAH18dwDn3J8A//S6AP/2
        xQD//OMA//zfAHZ1awD//NQA//7GAP//ygD//9sA///hAP//8AD///sAZGRjALO1qwCgpaIAW2djAGFt
        awCTp6cAcomKAKjz+wDi8/UAkbK5AFiEjgBNvt0ASa/MAFjF4QB4q7gAjKuzAJm1vQBzhYoAV6vFAJLK
        2wAhodAAMLjpAD276AAmcIsAOYCZAGaYqQCPxNYAj8PVACOWwwBZnLcAZq/MAIW0xwB6pLQAcJWmAGyP
        nwBwlKUAaoucAFl2hwBPZ3YAKTU+AHWFkQAfKjMAQ1hpAFVpegAmLzgAKDVDAENRYQBJWGkAT15vAEVS
        YQBRUlYA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgIC
        AgICAgICAgICAgICAgICAgICAgICAhIsJSwFKSQCcJeSlkdHAgICApmZAgICAigREhAyBSl2eomJdnaS
        lgICmYmAlgICAigUNC0xLCmOhoqMhY5wdpmZiIF/f5ACAi0xMjMFBSmOepRDPiRISJqIgn9zkAICAhA0
        EhAxLCmOlEBJUFA5Nkh2f3OQAgICAjAQEyssKwVxP1BMTExUUBA+fJACAgICAjAEFA0QKzZTVVlZWVlM
        VFATSAICAgICAhEXFhESMRBBUVJSOlJSTFRPRwICAgICAhYjGBYNMTVBUjo6ajpSWVRQJAICAgICAhYh
        HBgUEjRBO2JYWFg6WUw5RwICAgICAhghIBsWNDVTSjpYWDpSWUxJbAICAgICAhg7IxcVERBxU1E6YmNS
        WVVBcAICAgICAhY4ETQ1NAiLcUVKO1JRT0FylwICAgICAhQcHyAYNBCLc3xxQUNBcoV4kgICAgICAhs7
        IR8eGjCLdHR/c3+Ff3iJmwICAgICAhYDNRAQNRKLkJGUjYd2in54nAICAgICAjQQUTo7AxCHkUJ0OnWX
        hnl+kgICAgICAgI4Mjs6WBw1i5xCOjpukYp5kgICAgICAgICODJLQjpLNXySQlg6RnaKlwICAgICAgIC
        AgQySzs6OzWLl0I6Old2lwICAgICAgICAgI4MlFSOjsQdWRCOjpXdgICAgICAgICAgICAgICAgICAgIC
        AgICAgICAgICAv///wD///8AAQPPAAABhwAAAAMAAAAHAAAADwAAAB8AAAA/AAAAPwAAAD8AAAA/AAAA
        PwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwCAAD8AwAA/AOAAPwDwAD8A////ACgAAAAUAAAAKAAAAAEA
        CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAADLkZYAy5SXAJlNTgCyW1wAz2tsAMlo
        aQDScXIA4n6AANZ4eQDmiYoA2oKDAOqPkADojo8AvHR1AN+KiwDFensAoGNkAOOTlADwnZ4A55ucAPaq
        qwDspKUA962uAPmwsQDtp6kA8KytAPu1tgD9t7kA/bm7APSztAD/vb4A/ry9APW2twB/Pz8AtltbAMto
        aADPa2sAzm5tAIxLSwDPcXAArF1dAKRZWQDPcXEA0XRzANJ2dgDTeXkAuGxsAK9nZwCVWFgAzYWFAMN/
        fwCmbGwA86SkANainQDGmZIA9OzoAObTyQDAs6wAlX1uAHJhVQCSfGwAkHtsAIV0ZwDl4NwAb2ZeAKqX
        hACMgXYAm5GHAFtSRgBdVEgAs55/ALWrmwDdy6sA5dCoAP7syQCGg30AtqR9ANK/mADczrAA8ebNAI6K
        gQDm0qAAua2RAK+olQCtp5cA//z0AO3ivwDl16MA//G6AP/yuACdm5IAfXx3AOfcnwD/9LoA//bFAP/8
        4wD//N8AdnVrAP/81AD//sYA///KAP//2wD//+EA///wAP//+wBkZGMAs7WrAKClogBbZ2MAYW1rAJOn
        pwByiYoAqPP7AOLz9QCRsrkAWISOAE2+3QBJr8wAWMXhAHiruACMq7MAmbW9AHOFigBXq8UAksrbACGh
        0AAwuOkAPbvoACZwiwA5gJkAZpipAI/E1gCPw9UAI5bDAFmctwBmr8wAhbTHAHqktABwlaYAbI+fAHCU
        pQBqi5wAWXaHAE9ndgApNT4AdYWRAB8qMwBDWGkAVWl6ACYvOAAoNUMAQ1FhAElYaQBPXm8ARVJhAFFS
        VgD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgIOETAILDECfomE
        dpF2AgICmpkCAgMRMDEsM5R6iYV2kpkCAoN4kpICLw0QMiwpjYp6dnJvkpmDgXN/lAISNTEyLCyOjUBB
        MzM+nYJ/c5QCAhIQMTIrBY89T1RUVE8+cnOUAgICNDQSMTITRlVZWVlMVDRBcgICAgIUGxYNMRBFUU1S
        UlJMUBMCAgICAhggFRQQED9lOlg6UllUSQICAgICGyEbFjQ1UztYWFhSWVQ9AgICAgIcOxobERJGSlhY
        YmNNUEECAgICAhscOBEREHtGSlJjWVA9fQICAgICFAQUNBIxi4ddRkRTToWFAgICAgIcISEdGTCHdHOH
        i46LfoQCAgICAjgENDQ0EouOjnuLhYp3iQICAgICAjU7Ojw0e5RCWDx2inmJAgICAgICAjU7WDsDj5RC
        AVGRiokCAgICAgICAhBROjs4j5BCazyNhQICAgICAgICAjVROjs1cZQ7azyUAgICAgICAgICAgICAgIC
        AgICAgICAgICAv//8AICBzACAAYQEAAAEIsAADCNAABwfgAA8AIAAfACAAHwOgAB8IcAAfA6AAHweQAB
        8AIAAfACAAHwO4AB8DXAAfA64AHwivAB8AL///ACKAAAABAAAAAgAAAAAQAIAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8AAAAAAMuRlgDLlJcAmU1OALJbXADPa2wAyWhpANJxcgDifoAA1nh5AOaJ
        igDagoMA6o+QAOiOjwC8dHUA34qLAMV6ewCgY2QA45OUAPCdngDnm5wA9qqrAOykpQD3ra4A+bCxAO2n
        qQDwrK0A+7W2AP23uQD9ubsA9LO0AP+9vgD+vL0A9ba3AH8/PwC2W1sAy2hoAM9rawDObm0AjEtLAM9x
        cACsXV0ApFlZAM9xcQDRdHMA0nZ2ANN5eQC4bGwAr2dnAJVYWADNhYUAw39/AKZsbADzpKQA1qKdAMaZ
        kgD07OgA5tPJAMCzrACVfW4AcmFVAJJ8bACQe2wAhXRnAOXg3ABvZl4AqpeEAIyBdgCbkYcAW1JGAF1U
        SACznn8AtaubAN3LqwDl0KgA/uzJAIaDfQC2pH0A0r+YANzOsADx5s0AjoqBAObSoAC5rZEAr6iVAK2n
        lwD//PQA7eK/AOXXowD/8boA//K4AJ2bkgB9fHcA59yfAP/0ugD/9sUA//zjAP/83wB2dWsA//zUAP/+
        xgD//8oA///bAP//4QD///AA///7AGRkYwCztasAoKWiAFtnYwBhbWsAk6enAHKJigCo8/sA4vP1AJGy
        uQBYhI4ATb7dAEmvzABYxeEAeKu4AIyrswCZtb0Ac4WKAFerxQCSytsAIaHQADC46QA9u+gAJnCLADmA
        mQBmmKkAj8TWAI/D1QAjlsMAWZy3AGavzACFtMcAeqS0AHCVpgBsj58AcJSlAGqLnABZdocAT2d2ACk1
        PgB1hZEAHyozAENYaQBVaXoAJi84ACg1QwBDUWEASVhpAE9ebwBFUmEAUVJWAP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAACAgICAgICAgICAgICmAICBwgGBSSOkJGWmY4CnYiTAicPDAoljnl3d4OVnICB
        iZIJNhMzKY92b0hHbISCipQCCxcVDiZ9ZElfWldwhZQCAg01EDIsXkRmYFxNVkMCAgIRHxo3KEVLaGNl
        W0xBAgICFCEeGSpGUWpYYmFUTwICAhYhIR0ubkoBa2lnT1ACAgIYISEiL3xtPFJZVT4CAgICHDQSMSuG
        enFdU3KeAgICAiAhISEwf3Nzc3d4mgICAgIjIxsULYeLjI2QfpsCAgICAjg/QgEEdUBCAZCXAgICAgIC
        OT06OwN7Tjp0kAICAgICAgICAgICAgICAgICAgIC//sCAgARIR0AAId0AAGLjgADhAIABwICAAc0NAAH
        i44AB4uFAA+JAgAPAgIADzs6AA97lIAPPHbAD4kC//8CAg==
</value>
  </data>
</root>